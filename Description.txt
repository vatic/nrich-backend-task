Что нужно сделать
Для того чтобы оценить технические скиллы мы придумали простое приложение, в котором можно показать навыки
работы с теми технологиями, которые используются нами в продакшне. Node.js приложение должно реализовывать 2 endpoint:

- /track?id={tracker_id} где tracker_id - uuid, соответствующий полю uuid в Postgre таблице `trackers`.
Если трекер с таким id найден - нужно отправить данные в CH (или подготовить к отправке туда) и вернуть ответ HTTP 204.
Вместе с ответом нужно установить cookie user_id (сгенерировать новое значение, или обновить предыдущее).
- /stats?tracker_id={tracker_id}&from={from}&to={to} - должен возвращать кол-во событий по трекеру tracker_id из Clickhouse.
from и to - даты для фильтрации событий. Этот эндпоинт будет вызываться крайне редко

Данные, которые нужно отправить в CH:
    - date - дата события (UTC)
    - date_time - дата и время события (UTC)
    - event_id - уникальный id события. Должен быть сгенерирован при обработке трекинг события,
    - tracker_id - id трекера,
    - ip - ip адрес пользователя, запросившего трекер,
    - user_id - user id пользователя, запросившего трекер. Должен определяться по cookie с именем user_id
    - user_agent String - user agent браузера, запросившего трекер
    - url String - полный url, по которому был запрошен трекер,
    - value String - значение из postgre таблицы trackers

Несколько советов:
- endpoint /track должен быть реализован с учетом того, что он будет принимать большое кол-во трафика.
- Можно использовать любые доп сервисы, для реализации задачи. Например логично отправлять данные в Clickhouse используя Kafka
- По условию задачи данные в таблице `trackers` меняются очень редко и только добавляются (никогда не удаляются, но значение value может изредка обновляться). Приемлемо какое-то время использовать старое значение value

Время на выполнение:
Для человека, имеющего опыт работы со всеми компонентами выполнение займет 4-6 часов.
Не имея опыта предположительно займёт вдвое больше. Мы понимаем, что сложно выделить такое кол-во времени
одновременно, поэтому даём 1 неделю на выполнение. Еслии за неделю задание выполнить не удалось - лучше
отправить хотя бы частичный результат, чтобы было что посмотреть и объяснить в чём было затруднение

Что не нужно (не обязательно) делать в рамках этой задачи:
 - миграции в PG / CH. Достаточно написать скрипт, который положит данные в Postgre, либо описать что за шаги надо
 выполнить перед проведением теста

Как оформить результат:
Предпочтительно оформить docker-compose файл, который поднимет все компоненты. если это невозможно - сделать описание
что именно нужно сделать, чтобы запустить приложение. Прислать результат можно как ссылку на git репозиторий, или как tar архив
Крайне желательно написать интеграционные тесты для приложения

Как будет проверяться задание:
Для начала мы проведем ревью кода. Если задание выполнено полностью - развернём код на linux сервере (Ubuntu 20.04).
Перед http сервисом будет развернут nginx в качестве reverse-proxy. Запустим небольшое кол-во трафика (в районе 100rps) и дадим
поработать в течении 10-15 минут. После этого проверим как отвечало приложение и проверим что за данные попали в
Clickhouse / как само приложение возвращает данные из CH.
